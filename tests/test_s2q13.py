import sys
sys.path.append("delivery_network/")

import unittest
from main import Graph, graph_from_file

class Test_GraphLoading(unittest.TestCase):
    def test_network00(self):
        g = graph_from_file("/input/network.00.in")
        s=g.kruskal()
        self.assertEqual(s.graph, {1: [(8, 0, 1), (2, 11, 1), (6, 12, 1)], 2: [(5, 4, 1), (3, 10, 1), (1, 11, 1)], 3: [(4, 4, 1), (2, 10, 1)], 4: [(3, 4, 1), (10, 4, 1)], 5: [(2, 4, 1), (7, 14, 1)], 6: [(1, 12, 1)], 7: [(5, 14, 1)], 8: [(1, 0, 1), (9, 14, 1)], 9: [(8, 14, 1)], 10: [(4, 4, 1)]})
    def test_network1(self):
        g = graph_from_file("/input/network.1.in")
        s=g.kruskal()
        self.assertEqual(s.graph, {1: [(2, 2, 1), (5, 2, 1), (14, 11, 1), (8, 13, 1)], 2: [(1, 2, 1), (3, 5, 1), (13, 8, 1)], 3: [(2, 5, 1)], 4: [(12, 5, 1), (8, 8, 1)], 5: [(1, 2, 1)], 6: [(17, 15, 1)], 7: [(16, 13, 1), (14, 15, 1)], 8: [(11, 1, 1), (4, 8, 1), (20, 11, 1), (1, 13, 1)], 9: [(12, 9, 1)], 10: [(16, 37, 1)], 11: [(8, 1, 1)], 12: [(4, 5, 1), (9, 9, 1)], 13: [(19, 1, 1), (2, 8, 1)], 14: [(1, 11, 1), (7, 15, 1)], 15: [(19, 27, 1)], 16: [(7, 13, 1), (10, 37, 1)], 17: [(18, 11, 1), (20, 14, 1), (6, 15, 1)], 18: [(17, 11, 1)], 19: [(13, 1, 1), (15, 27, 1)], 20: [(8, 11, 1), (17, 14, 1)]})

if __name__ == '__main__':
    unittest.main()
